@model NosTRAILgic.Models.TrailMeetup

@{
    ViewBag.Title = "Details";
}


<div>
    <h2>Trail Details - @Html.DisplayFor(model => model.Name)</h2>
</div>

<div>
    @Html.ActionLink("Join Trail", "JoinTrail", new { id = Model.TrailMeetupID }, new { @class = "btn btn-default" })
</div>

<div>
    <hr />
    
    <div id="map_canvas" style="width: 1000px; height: 300px;"></div>

    <hr />

    <table>
        <tr>
            <td width="25%"><b>@Html.DisplayNameFor(model => model.CreatorID)</b></td>
            <td width="25%">@Html.DisplayFor(model => model.CreatorID)</td>
            <td width="25%"><b>Participants</b></td>
        </tr>

        <tr>
            <td><b>@Html.DisplayNameFor(model => model.Name)</b></td>
            <td>@Html.DisplayFor(model => model.Name)</td>
            <td>@Html.Raw(ViewBag.participants)</td>
        </tr>

        <tr>
            <td><b>@Html.DisplayNameFor(model => model.Description)</b></td>
            <td>@Html.DisplayFor(model => model.Description)</td>
            <td></td>
        </tr>

        @*<tr>
            <td><b>@Html.DisplayNameFor(model => model.Location)</b></td>
            <td>@Html.DisplayFor(model => model.Location)</td>
            <td></td>
        </tr>*@

        <tr>
            <td><b>@Html.DisplayNameFor(model => model.ImageLink)</b></td>
            <td>@Html.DisplayFor(model => model.ImageLink)</td>
            <td></td>
        </tr>

        <tr>
            <td><b>@Html.DisplayNameFor(model => model.Date)</b></td>
            <td>@Html.DisplayFor(model => model.Date)</td>
            <td></td>
        </tr>

        <tr>
            <td><b>@Html.DisplayNameFor(model => model.TimeFrom)</b></td>
            <td>@Html.DisplayFor(model => model.TimeFrom)</td>
            <td></td>
        </tr>

        <tr>
            <td><b>@Html.DisplayNameFor(model => model.TimeTo)</b></td>
            <td>@Html.DisplayFor(model => model.TimeTo)</td>
            <td></td>
        </tr>

        <tr>
            <td><b>@Html.DisplayNameFor(model => model.Limit)</b></td>
            <td>@Html.DisplayFor(model => model.Limit)</td>
            <td></td>
        </tr>

    </table>
    
</div>

<p>
    @Html.ActionLink("Edit", "Edit", new { id = Model.TrailMeetupID }, new { @class = "btn btn-default" })
    @Html.ActionLink("Delete", "Delete", new { id = Model.TrailMeetupID }, new { @class = "btn btn-default" })
    <button class="btn btn-default" type="button" onclick="location.href='@Url.Action("Index", "TrailMeetup")'">Back to Trail Index</button>
</p>

<script type="text/javascript" src="http://maps.google.com/maps/api/js?sensor=false"></script>
<script type="text/javascript">
    window.onload = initialize;

    function initialize() {

        var mapOptions = {
        //    center: new google.maps.LatLng(1.4038, 103.7941),
        //    center: new google.maps.LatLng(1.3385674, 103.7059549),
            zoom: 15,
            mapTypeId: google.maps.MapTypeId.ROADMAP
        };

        var map = new google.maps.Map(document.getElementById("map_canvas"),
          mapOptions);

        //// create a marker
        //var latlng = new google.maps.LatLng(1.4038, 103.7941);
        //var marker = new google.maps.Marker({
        //    position: latlng,
        //    map: map,
        //    title: 'My Place'
        //});

        var geocoder;
        geocoder = new google.maps.Geocoder();

        var googleMapAddress = "";

        // Code to take Trail Input of Location
//      var trailInput = "@*@Url.Content(Model.Location)*@"  // Remember to remove the comment for the Razor Code
//        var trailInput = "Boon Lay MRT, Chinese Garden MRT, Lakeside MRT"
        var trailInput = '@ViewBag.linqLocationTest';

        console.log("Viewbag results: ", trailInput);

        // Split the Trail Input of Location based on COMMA into different location
        var trailArray = trailInput.split(',');

        console.log(trailInput);

        for (var i = trailArray.length-1; i > 0 ; i--)
        {
            console.log(trailArray[i - 1]);

            googleMapAddress = trailArray[i - 1];

            if (geocoder) {
                geocoder.geocode({ 'address': googleMapAddress }, function (results, status) {
                    if (status == google.maps.GeocoderStatus.OK) {
                        if (status != google.maps.GeocoderStatus.ZERO_RESULTS) {
                            map.setCenter(results[0].geometry.location);

                            var infowindow = new google.maps.InfoWindow(
                                {
                                    content: '<b>' + googleMapAddress + '</b>',
                                    size: new google.maps.Size(150, 50)
                                });

                            var marker = new google.maps.Marker({
                                position: results[0].geometry.location,
                                map: map,
                                title: googleMapAddress
                            });

                            google.maps.event.addListener(marker, 'click', function () {
                                infowindow.open(map, marker);
                            });

                        } else {
                            alert("No results found");
                        }
                    } else {
                        alert("Geocode was not successful for the following reason: " + status);
                    }
                });
            }
        }
    }
</script>